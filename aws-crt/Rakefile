require 'rake/clean'
require 'rspec/core/rake_task'

CLEAN.include 'tmp'
CLEAN.include 'pkg'
CLEAN.include 'bin/'

desc "Compile CRT libraries"
task :compile do
  require "fileutils"
  native_dir = File.expand_path('native', File.dirname(__FILE__))
  build_dir = File.expand_path('build', native_dir)
  if !Dir.exist?(build_dir)
    Dir.mkdir(build_dir)
  end
  Dir.chdir(build_dir) do
    if !File.exist?('CMakeCache.txt')
      sh "cmake #{native_dir}"
    end
    sh "cmake --build #{build_dir}"
  end
end

desc "Build the aws-crt gem for supported platforms"
task :build => :clean do
  require "rubygems/package"
  require "fileutils"

  # Maps platform to crt binary name.
  PLATFORMS = {
    "universal-darwin" => %w[universal-darwin],
    # "x86-linux"        => %w[x86-linux],
    # "x86_64-linux"     => %w[x86_64-linux],
    # "arm-linux"        => %w[armv6-linux armv6hf-linux],
    # "x86-mingw32"      => %w[x86-windows.dll],
  }.freeze

  # Maps platform to the built binary
  binaries =
    {
      "universal-darwin" => "native/build/libaws-crt.dylib",
      # TODO: Other platform bins.... need download or other build option?
    }

  root = File.dirname(__FILE__)
  bins = File.join(root, "bin/")
  pkgs = File.join(root, "pkg/")
  FileUtils.mkdir_p(pkgs, verbose: true)

  platforms = PLATFORMS.dup
  platforms[Gem::Platform::RUBY] = [] # fallback platform
  platforms["universal-java"] = platforms.values.flatten.uniq

  # Load our gem specification.
  orig_spec = Gem::Specification.load("aws-crt.gemspec")
  gempaths = platforms.each_pair.map do |platform, source_binaries|
    spec = orig_spec.dup
    puts "[#{platform}]"
    spec.platform = platform

    if source_binaries.empty?
      puts "\tPure ruby build."
      spec.post_install_message = <<-MSG.gsub(/ {2,}/, " ")
        Binary aws-crt gem could not be installed. You will need to install aws-crt separately.
        If you are on ARM (e.g. Raspberry PI), you might want to install the gem with explicit --platform:
        $> gem install aws-crt --platform arm-linux
      MSG
    else
      source_binaries.each do |binary|
        src_name = binaries.fetch(binary)
        dest_name = "bin/#{binary}/#{File.basename(src_name)}"
        FileUtils.mkdir_p("bin/#{binary}")
        FileUtils.cp(src_name, dest_name, verbose: true)
        spec.files << dest_name
      end
    end

    # Build and move the gem to the pkg/ directory.
    gemname = Gem::Package.build(spec)
    File.join(pkgs, File.basename(gemname)).tap do |gempath|
      FileUtils.mv(gemname, gempath, verbose: true)
    end
  end
end

RSpec::Core::RakeTask.new(:spec)
